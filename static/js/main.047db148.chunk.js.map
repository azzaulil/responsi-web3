{"version":3,"sources":["logo.svg","Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Weather","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","res","json","parsedJSON","list","map","data","dateTime","concat","dt_txt","tempX","main","temp","tempMin","temp_min","tempMax","temp_max","weather","setState","isLoaded","catch","error","console","log","react_default","a","createElement","className","scope","length","item","Component","App","src_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mLCsEzBC,cAnEX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAM,IAJQR,mFAQF,IAAAS,EAAAN,KAChBO,MAAM,kIACLC,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACjBF,KAAM,SAAAG,GAAU,OAAIA,EAAWC,KAAKC,IAAI,SAAAC,GAAI,MACzC,CACIC,SAAQ,GAAAC,OAAMF,EAAKG,QACnBC,MAAK,GAAAF,OAAMF,EAAKK,KAAKC,MACrBC,QAAO,GAAAL,OAAMF,EAAKK,KAAKG,UACvBC,QAAO,GAAAP,OAAMF,EAAKK,KAAKK,UACvBC,QAAO,GAAAT,OAAMF,EAAKW,QAAQ,GAAGN,WAGpCX,KAAM,SAAAH,GAAK,OAAIC,EAAKoB,SAAS,CAC1BrB,QACAsB,UAAW,MAEdC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,iBAAkBF,sCAGxC,IACExB,EAASL,KAAKI,MAAdC,MACP,OACC2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wCAEAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,aACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,QACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,YACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,YACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,aAGJJ,EAAAC,EAAAC,cAAA,aAEA7B,EAAMgC,OAAS,EAAIhC,EAAMQ,IAAI,SAAAyB,GAAQ,IACtBvB,EAA4CuB,EAA5CvB,SAAUG,EAAkCoB,EAAlCpB,MAAMG,EAA4BiB,EAA5BjB,QAAQE,EAAoBe,EAApBf,QAASE,EAAWa,EAAXb,QACxC,OACIO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKnB,GACLiB,EAAAC,EAAAC,cAAA,UAAKhB,GACLc,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,UAAKX,GACLS,EAAAC,EAAAC,cAAA,UAAKT,OAIV,eA3DCc,aCWPC,MARf,WACE,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.047db148.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n\r\nclass Weather extends Component {\r\n    constructor(props){\r\n      super(props);\r\n  \r\n      this.state = {\r\n        items:[]\r\n      };\r\n    }\r\n\r\ncomponentDidMount() {\r\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=Yogyakarta,id&mode=json&appid=e1522e4dd8a16d7ada4bd39f22c57e4b&units=metric\")\r\n    .then (res => res.json())\r\n    .then (parsedJSON => parsedJSON.list.map(data => (\r\n        {\r\n            dateTime : `${data.dt_txt}`,\r\n            tempX : `${data.main.temp}`,\r\n            tempMin : `${data.main.temp_min}`,\r\n            tempMax : `${data.main.temp_max}`,\r\n            weather : `${data.weather[0].main}`,\r\n        }\r\n    )))\r\n    .then (items => this.setState({\r\n        items,\r\n        isLoaded : false\r\n    }))\r\n    .catch(error => console.log('parsing failed', error))\r\n}\r\n\r\n render (){\r\n     const {items} = this.state;\r\n     return (\r\n      <div className=\"container\">\r\n        <h1>Prakiraan Cuaca Yogyakarta</h1>\r\n      \r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Date time</th>\r\n              <th scope=\"col\">Temp</th>\r\n              <th scope=\"col\">Temp Min</th>\r\n              <th scope=\"col\">Temp Max</th>\r\n              <th scope=\"col\">Weather</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n        {\r\n          items.length > 0 ? items.map(item => {\r\n                  const {dateTime, tempX,tempMin,tempMax, weather} = item;\r\n                  return (\r\n                      <div>                    \r\n                        <tr>\r\n                          <th>{dateTime}</th>\r\n                          <td>{tempX}</td>\r\n                          <td>{tempMin}</td>\r\n                          <td>{tempMax}</td>\r\n                          <td>{weather}</td>\r\n                        </tr> \r\n                      </div>\r\n                    );\r\n                }) : null\r\n            }\r\n            </tbody>\r\n        </table>\r\n     </div>\r\n     );\r\n }\r\n} \r\n\r\nexport default Weather;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Weather from './Weather';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Weather/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}